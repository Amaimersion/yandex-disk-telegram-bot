"""Add yandex disk token model

Revision ID: 0da01ac99393
Revises: f32dfa1ec846
Create Date: 2020-03-28 23:17:20.637889

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0da01ac99393'
down_revision = 'f32dfa1ec846'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_update_date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('telegram_id', sa.Integer(), nullable=False, comment='Unique ID to identificate user in Telegram'),
    sa.Column('is_bot', sa.Boolean(), nullable=False, comment='User is bot in Telegram'),
    sa.Column('language', sa.Enum('EN', name='supportedlanguages'), nullable=False, comment='Preferred language of user'),
    sa.Column('group', sa.Enum('USER', 'TESTER', 'ADMIN', name='usergroup'), nullable=False, comment='User rights group'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('telegram_id')
    )
    op.create_table('chats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False, comment='Unique ID to identificate chat in Telegram'),
    sa.Column('type', sa.Enum('PRIVATE', 'GROUP', 'SUPERGROUP', 'CHANNEL', name='chattype'), nullable=False, comment='Type of Telegram chat'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Through this chat message can be sent to this user'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('telegram_id')
    )
    op.create_table('yandex_disk_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('access_token', sa.String(), nullable=True, comment='Yandex.Disk OAuth token'),
    sa.Column('refresh_token', sa.String(), nullable=True, comment='Refresh token to use to update access token'),
    sa.Column('access_token_type', sa.String(), nullable=True, comment='Type of access token'),
    sa.Column('access_token_expires_in', sa.DateTime(), nullable=True, comment='Access token expires on this date (UTC+0)'),
    sa.Column('insert_token', sa.String(), nullable=True, comment="Token for update controlling. i.e., you shouldn't insert values if you don't know insert token"),
    sa.Column('insert_token_expires_in', sa.DateTime(), nullable=True, comment='Insert token expires on this date (UTC+0)'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Token belongs to this user'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('yandex_disk_tokens')
    op.drop_table('chats')
    op.drop_table('users')
    # ### end Alembic commands ###
